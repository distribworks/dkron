// Code generated by protoc-gen-go. DO NOT EDIT.
// source: executor.proto

package dkron

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExecuteRequest struct {
	JobName              string            `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	Config               map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StatusServer         uint32            `protobuf:"varint,3,opt,name=status_server,json=statusServer,proto3" json:"status_server,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ExecuteRequest) Reset()         { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()    {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{0}
}

func (m *ExecuteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteRequest.Unmarshal(m, b)
}
func (m *ExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRequest.Merge(m, src)
}
func (m *ExecuteRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteRequest.Size(m)
}
func (m *ExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRequest proto.InternalMessageInfo

func (m *ExecuteRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *ExecuteRequest) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ExecuteRequest) GetStatusServer() uint32 {
	if m != nil {
		return m.StatusServer
	}
	return 0
}

type ExecuteResponse struct {
	Output               []byte   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteResponse) Reset()         { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()    {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{1}
}

func (m *ExecuteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteResponse.Unmarshal(m, b)
}
func (m *ExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteResponse.Marshal(b, m, deterministic)
}
func (m *ExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteResponse.Merge(m, src)
}
func (m *ExecuteResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteResponse.Size(m)
}
func (m *ExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteResponse proto.InternalMessageInfo

func (m *ExecuteResponse) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ExecuteResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type StatusUpdateRequest struct {
	Progress             float32  `protobuf:"fixed32,1,opt,name=progress,proto3" json:"progress,omitempty"`
	Output               []byte   `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Error                bool     `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusUpdateRequest) Reset()         { *m = StatusUpdateRequest{} }
func (m *StatusUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*StatusUpdateRequest) ProtoMessage()    {}
func (*StatusUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{2}
}

func (m *StatusUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusUpdateRequest.Unmarshal(m, b)
}
func (m *StatusUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusUpdateRequest.Marshal(b, m, deterministic)
}
func (m *StatusUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusUpdateRequest.Merge(m, src)
}
func (m *StatusUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_StatusUpdateRequest.Size(m)
}
func (m *StatusUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusUpdateRequest proto.InternalMessageInfo

func (m *StatusUpdateRequest) GetProgress() float32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *StatusUpdateRequest) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *StatusUpdateRequest) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

type StatusUpdateResponse struct {
	R                    int64    `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusUpdateResponse) Reset()         { *m = StatusUpdateResponse{} }
func (m *StatusUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*StatusUpdateResponse) ProtoMessage()    {}
func (*StatusUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{3}
}

func (m *StatusUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusUpdateResponse.Unmarshal(m, b)
}
func (m *StatusUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusUpdateResponse.Marshal(b, m, deterministic)
}
func (m *StatusUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusUpdateResponse.Merge(m, src)
}
func (m *StatusUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_StatusUpdateResponse.Size(m)
}
func (m *StatusUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusUpdateResponse proto.InternalMessageInfo

func (m *StatusUpdateResponse) GetR() int64 {
	if m != nil {
		return m.R
	}
	return 0
}

func init() {
	proto.RegisterType((*ExecuteRequest)(nil), "dkron.ExecuteRequest")
	proto.RegisterMapType((map[string]string)(nil), "dkron.ExecuteRequest.ConfigEntry")
	proto.RegisterType((*ExecuteResponse)(nil), "dkron.ExecuteResponse")
	proto.RegisterType((*StatusUpdateRequest)(nil), "dkron.StatusUpdateRequest")
	proto.RegisterType((*StatusUpdateResponse)(nil), "dkron.StatusUpdateResponse")
}

func init() { proto.RegisterFile("executor.proto", fileDescriptor_12d1cdcda51e000f) }

var fileDescriptor_12d1cdcda51e000f = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x4f, 0xea, 0x40,
	0x14, 0xc5, 0x33, 0x6d, 0x28, 0x7d, 0x97, 0xc2, 0x7b, 0x99, 0x87, 0xa4, 0xd6, 0x0d, 0xa2, 0x0b,
	0x56, 0x5d, 0xe0, 0x06, 0xdc, 0x18, 0xa3, 0x24, 0xae, 0x4c, 0x1c, 0xe2, 0x9a, 0x14, 0xb8, 0x12,
	0xf9, 0xd3, 0xa9, 0x77, 0xa6, 0x44, 0xbe, 0xa0, 0x9f, 0xcb, 0x30, 0x1d, 0x10, 0x4c, 0x77, 0x3d,
	0x67, 0x7a, 0x7f, 0xe7, 0xdc, 0x69, 0xa1, 0x81, 0x9f, 0x38, 0xcd, 0xb5, 0xa4, 0x38, 0x23, 0xa9,
	0x25, 0xaf, 0xcc, 0x96, 0x24, 0xd3, 0xce, 0x17, 0x83, 0xc6, 0xd0, 0x9c, 0xa0, 0xc0, 0x8f, 0x1c,
	0x95, 0xe6, 0xe7, 0xe0, 0x2f, 0xe4, 0x64, 0x9c, 0x26, 0x6b, 0x0c, 0x59, 0x9b, 0x75, 0xff, 0x88,
	0xea, 0x42, 0x4e, 0x9e, 0x93, 0x35, 0xf2, 0x01, 0x78, 0x53, 0x99, 0xbe, 0xbd, 0xcf, 0x43, 0xa7,
	0xed, 0x76, 0x6b, 0xbd, 0xcb, 0xd8, 0x50, 0xe2, 0x53, 0x42, 0xfc, 0x60, 0xde, 0x19, 0xa6, 0x9a,
	0xb6, 0xc2, 0x0e, 0xf0, 0x2b, 0xa8, 0x2b, 0x9d, 0xe8, 0x5c, 0x8d, 0x15, 0xd2, 0x06, 0x29, 0x74,
	0xdb, 0xac, 0x5b, 0x17, 0x41, 0x61, 0x8e, 0x8c, 0x17, 0x0d, 0xa0, 0x76, 0x34, 0xcb, 0xff, 0x81,
	0xbb, 0xc4, 0xad, 0x2d, 0xb1, 0x7b, 0xe4, 0x4d, 0xa8, 0x6c, 0x92, 0x55, 0x8e, 0xa1, 0x63, 0xbc,
	0x42, 0xdc, 0x3a, 0x7d, 0xd6, 0xb9, 0x83, 0xbf, 0x87, 0x16, 0x2a, 0x93, 0xa9, 0x42, 0xde, 0x02,
	0x4f, 0xe6, 0x3a, 0xcb, 0xb5, 0x21, 0x04, 0xc2, 0xaa, 0x1d, 0x04, 0x89, 0x24, 0xed, 0x21, 0x46,
	0x74, 0xc6, 0xf0, 0x7f, 0x64, 0xba, 0xbc, 0x66, 0xb3, 0xe4, 0xe7, 0x36, 0x22, 0xf0, 0x33, 0x92,
	0x73, 0x42, 0xa5, 0x0c, 0xc6, 0x11, 0x07, 0x7d, 0x14, 0xe0, 0x94, 0x07, 0xec, 0x76, 0xf4, 0xf7,
	0x01, 0xd7, 0xd0, 0x3c, 0x0d, 0xb0, 0x35, 0x03, 0x60, 0x64, 0xd0, 0xae, 0x60, 0xd4, 0x7b, 0x04,
	0x7f, 0x68, 0xbf, 0x14, 0xef, 0x43, 0xd5, 0xee, 0xc4, 0xcf, 0x4a, 0x6f, 0x3a, 0x6a, 0xfd, 0xb6,
	0x0b, 0x66, 0xef, 0x05, 0x82, 0x22, 0xeb, 0x09, 0x57, 0x19, 0x12, 0xbf, 0x07, 0xaf, 0x48, 0xe5,
	0x91, 0x9d, 0x28, 0xd9, 0x35, 0xba, 0x28, 0x3d, 0x2b, 0x90, 0x13, 0xcf, 0xfc, 0x37, 0x37, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xec, 0x6d, 0xd6, 0x6b, 0x49, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExecutorClient is the client API for Executor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecutorClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type executorClient struct {
	cc *grpc.ClientConn
}

func NewExecutorClient(cc *grpc.ClientConn) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/dkron.Executor/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutorServer is the server API for Executor service.
type ExecutorServer interface {
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
}

// UnimplementedExecutorServer can be embedded to have forward compatible implementations.
type UnimplementedExecutorServer struct {
}

func (*UnimplementedExecutorServer) Execute(ctx context.Context, req *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

func RegisterExecutorServer(s *grpc.Server, srv ExecutorServer) {
	s.RegisterService(&_Executor_serviceDesc, srv)
}

func _Executor_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkron.Executor/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Executor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkron.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Executor_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "executor.proto",
}

// StatusHelperClient is the client API for StatusHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusHelperClient interface {
	Update(ctx context.Context, in *StatusUpdateRequest, opts ...grpc.CallOption) (*StatusUpdateResponse, error)
}

type statusHelperClient struct {
	cc *grpc.ClientConn
}

func NewStatusHelperClient(cc *grpc.ClientConn) StatusHelperClient {
	return &statusHelperClient{cc}
}

func (c *statusHelperClient) Update(ctx context.Context, in *StatusUpdateRequest, opts ...grpc.CallOption) (*StatusUpdateResponse, error) {
	out := new(StatusUpdateResponse)
	err := c.cc.Invoke(ctx, "/dkron.StatusHelper/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusHelperServer is the server API for StatusHelper service.
type StatusHelperServer interface {
	Update(context.Context, *StatusUpdateRequest) (*StatusUpdateResponse, error)
}

// UnimplementedStatusHelperServer can be embedded to have forward compatible implementations.
type UnimplementedStatusHelperServer struct {
}

func (*UnimplementedStatusHelperServer) Update(ctx context.Context, req *StatusUpdateRequest) (*StatusUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterStatusHelperServer(s *grpc.Server, srv StatusHelperServer) {
	s.RegisterService(&_StatusHelper_serviceDesc, srv)
}

func _StatusHelper_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusHelperServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkron.StatusHelper/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusHelperServer).Update(ctx, req.(*StatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusHelper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkron.StatusHelper",
	HandlerType: (*StatusHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _StatusHelper_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "executor.proto",
}
