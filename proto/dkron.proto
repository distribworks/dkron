// protoc -I proto/ --go_out=plugin/types --go_opt=paths=source_relative --go-grpc_out=plugin/types --go-grpc_opt=paths=source_relative dkron.proto
syntax = "proto3";

package types;
option go_package = "github.com/distribworks/dkron/plugin/types";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message Job {
  string name = 1;
  string timezone = 2;
  string schedule = 3;
  string owner = 7;
  string owner_email = 8;
  int32 success_count = 9;
  int32 error_count = 10;
  bool disabled = 11;
  map<string, string> tags = 12;
  uint32 retries = 13;
  repeated string dependent_jobs = 14;
  string parent_job = 15;
  string concurrency = 16;
  string executor = 17;
  map<string, string> executor_config = 18;
  string status = 19;
  map<string, string> metadata = 20;
  message NullableTime {
    bool has_value = 1;
    google.protobuf.Timestamp time = 2;
  }
  NullableTime last_success = 25;
  NullableTime last_error = 26;
  google.protobuf.Timestamp next = 23;
  string displayname = 24;
  map<string, PluginConfig> processors = 27;
  bool ephemeral = 28;
  NullableTime expires_at = 29;
}

message PluginConfig {
  map<string, string> config = 1;
}

message SetJobRequest {
  Job job = 1;
}

message SetJobResponse {
  Job job = 1;
}

message DeleteJobRequest {
  string job_name = 1;
}

message DeleteJobResponse{
  Job job = 1;
}

message GetJobRequest {
  string job_name = 1;
}

message GetJobResponse {
  Job job = 1;
}

message Execution {
  string job_name = 1;
	bool success = 2;
	bytes output = 3;
	string node_name = 4;
	int64 group = 5;
  uint32 attempt = 6;
  google.protobuf.Timestamp started_at = 7;
  google.protobuf.Timestamp finished_at = 8;
}

message ExecutionDoneRequest {
  Execution execution = 1;
}

message ExecutionDoneResponse {
  string from = 1;
  bytes payload = 2;
}

message RunJobRequest {
  string job_name = 1;
}

message RunJobResponse {
  Job job = 1;
}

message ToggleJobRequest {
  string job_name = 1;
}

message ToggleJobResponse {
  Job job = 1;
}

message RaftServer {
  string id = 1;
	string node = 2;
	string address = 3;
	bool leader = 4;
	bool voter = 5; 
	string raft_protocol = 6;
}

message RaftGetConfigurationResponse {
  repeated RaftServer servers = 1;
  uint64 index = 2;   
}

message RaftRemovePeerByIDRequest {
  string id = 1;
}

message AgentRunStream {
  Execution execution = 1;
}

message AgentRunResponse {
  string from = 1;
  bytes payload = 2;
}

message GetActiveExecutionsResponse {
  repeated Execution executions = 1;
}

service Dkron {
  rpc GetJob (GetJobRequest) returns (GetJobResponse);
  rpc ExecutionDone (ExecutionDoneRequest) returns (ExecutionDoneResponse);
  rpc Leave (google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc SetJob (SetJobRequest) returns (SetJobResponse);
  rpc DeleteJob (DeleteJobRequest) returns (DeleteJobResponse);
  rpc RunJob (RunJobRequest) returns (RunJobResponse);
  rpc ToggleJob (ToggleJobRequest) returns (ToggleJobResponse);
  rpc RaftGetConfiguration (google.protobuf.Empty) returns (RaftGetConfigurationResponse);
  rpc RaftRemovePeerByID (RaftRemovePeerByIDRequest) returns (google.protobuf.Empty);
  rpc GetActiveExecutions (google.protobuf.Empty) returns  (GetActiveExecutionsResponse);
  rpc SetExecution (Execution) returns (google.protobuf.Empty);
}

message AgentRunRequest {
  Job job = 1;
  Execution execution = 2;
}

service Agent {
  rpc AgentRun (AgentRunRequest) returns (stream AgentRunStream);
}
