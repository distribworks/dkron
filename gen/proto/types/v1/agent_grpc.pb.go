// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: types/v1/agent.proto

package typesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	AgentRun(ctx context.Context, in *AgentRunRequest, opts ...grpc.CallOption) (AgentService_AgentRunClient, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) AgentRun(ctx context.Context, in *AgentRunRequest, opts ...grpc.CallOption) (AgentService_AgentRunClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], "/types.v1.AgentService/AgentRun", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServiceAgentRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentService_AgentRunClient interface {
	Recv() (*AgentRunStream, error)
	grpc.ClientStream
}

type agentServiceAgentRunClient struct {
	grpc.ClientStream
}

func (x *agentServiceAgentRunClient) Recv() (*AgentRunStream, error) {
	m := new(AgentRunStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	AgentRun(*AgentRunRequest, AgentService_AgentRunServer) error
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) AgentRun(*AgentRunRequest, AgentService_AgentRunServer) error {
	return status.Errorf(codes.Unimplemented, "method AgentRun not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_AgentRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentRunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServiceServer).AgentRun(m, &agentServiceAgentRunServer{stream})
}

type AgentService_AgentRunServer interface {
	Send(*AgentRunStream) error
	grpc.ServerStream
}

type agentServiceAgentRunServer struct {
	grpc.ServerStream
}

func (x *agentServiceAgentRunServer) Send(m *AgentRunStream) error {
	return x.ServerStream.SendMsg(m)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.v1.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentRun",
			Handler:       _AgentService_AgentRun_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types/v1/agent.proto",
}
