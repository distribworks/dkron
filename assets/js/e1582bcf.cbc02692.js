"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8490],{95369:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=i(85893),o=i(11151);const s={},r="Plugins",l={id:"usage/plugins/index",title:"Plugins",description:"Intro",source:"@site/docs/usage/plugins/index.md",sourceDirName:"usage/plugins",slug:"/usage/plugins/",permalink:"/docs/usage/plugins/",draft:!1,unlisted:!1,editUrl:"https://github.com/distribworks/dkron/tree/main/website/docs/docs/usage/plugins/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Metrics",permalink:"/docs/usage/metrics"},next:{title:"Developing plugins",permalink:"/docs/usage/plugins/develop"}},a={},c=[{value:"Intro",id:"intro",level:2},{value:"How it Works",id:"how-it-works",level:2},{value:"Installing a Plugin",id:"installing-a-plugin",level:2}];function u(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"plugins",children:"Plugins"})}),"\n",(0,t.jsx)(n.h2,{id:"intro",children:"Intro"}),"\n",(0,t.jsx)(n.p,{children:"Plugins in Dkron allow you to add funcionality that integrates with the workflow of the job execution in Dkron. It's a powerful system that allows you to extend and adapt Dkron to your special needs."}),"\n",(0,t.jsx)(n.p,{children:"This page documents the basics of how the plugin system in Dkron works, and how to setup a basic development environment for plugin development if you're writing a Dkron plugin."}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How it Works"}),"\n",(0,t.jsx)(n.p,{children:"Dkron execution execution processors are provided via plugins. Each plugin exposes functionality for modifying the execution. Plugins are executed as a separate process and communicate with the main Dkron binary over an RPC interface."}),"\n",(0,t.jsx)(n.p,{children:"The code within the binaries must adhere to certain interfaces. The network communication and RPC is handled automatically by higher-level libraries. The exact interface to implement is documented in its respective documentation section."}),"\n",(0,t.jsx)(n.h2,{id:"installing-a-plugin",children:"Installing a Plugin"}),"\n",(0,t.jsx)(n.p,{children:"Dkron searches for plugins at startup, to install a plugin just drop the binary in one of the following locations:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"/etc/dkron/plugins"}),"\n",(0,t.jsx)(n.li,{children:"Dkron executable directory"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>r});var t=i(67294);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);