"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8715],{73885:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var n=s(85893),a=s(11151);const o={},r="RabbitMQ Executor",u={id:"usage/executors/rabbitmq",title:"RabbitMQ Executor",description:"A basic RabbitMQ executor that produces a message on a RabbitMQ server/cluster.",source:"@site/docs/usage/executors/rabbitmq.md",sourceDirName:"usage/executors",slug:"/usage/executors/rabbitmq",permalink:"/docs/usage/executors/rabbitmq",draft:!1,unlisted:!1,editUrl:"https://github.com/distribworks/dkron/tree/main/website/docs/docs/usage/executors/rabbitmq.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NATS Executor",permalink:"/docs/usage/executors/nats"},next:{title:"Shell Executor",permalink:"/docs/usage/executors/shell"}},i={},c=[{value:"Configuration",id:"configuration",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"rabbitmq-executor",children:"RabbitMQ Executor"})}),"\n",(0,n.jsx)(t.p,{children:"A basic RabbitMQ executor that produces a message on a RabbitMQ server/cluster."}),"\n",(0,n.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,n.jsx)(t.p,{children:"Params"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"url:                         URL of the RabbitMQ server/cluster with VHost. Example: amqp://guest:guest@localhost:5672/\nqueue.name:                  The name of the queue to publish the message to. Required\nqueue.durable:               Whether the queue is durable or not. Optional, defaults to false\nqueue.auto_delete:           Whether the queue is auto-deleted after publishing the message. Optional, defaults to false\nqueue.exclusive:             Whether the queue is exclusive or not. Optional, defaults to false\nmessage.content_type:        The content type of the message\nmessage.delivery_mode:       Message delivery mode. 1 for non-persistent, 2 for persistent. Optional, defaults to 0\nmessage.messageId:           The message ID\nmessage.body:                The actual message body in desired format that will be sent to the queue\nmessage.base64:              Encoded message body in base64 format. Optional, but should not be set if message.body is set.\n"})}),"\n",(0,n.jsx)(t.p,{children:"Example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:'{\n  "executor": "rabbitmq",\n  "executor_config": {\n    "url": "amqp://guest:guest@localhost:5672/",\n    "queue.name": "test",\n    "queue.create": "true",\n    "queue.durable": "true",\n    "queue.auto_delete": "false",\n    "queue.exclusive": "false",\n    "message.content_type": "application/json",\n    "message.delivery_mode": "2",\n    "message.messageId": "4373732772",\n    "message.body": "{\\"key\\":\\"value\\"}"\n  }\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>u,a:()=>r});var n=s(67294);const a={},o=n.createContext(a);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function u(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);