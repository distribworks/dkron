# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'
basePath: /v1
host: localhost:8080
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
# This is your document metadata
info:
  version: "0.9.2"
  title: Dkron REST API
  description: |
    You can communicate with Dkron using a RESTful JSON API over HTTP. Dkron nodes usually listen on port `8080` for API requests. All examples in this section assume that you've found a running leader at `localhost:8080`.

    Dkron implements a RESTful JSON API over HTTP to communicate with software clients. Dkron listens in port `8080` by default. All examples in this section assume that you're using the default port.

    Default API responses are unformatted JSON add the `pretty=true` param to format the response.

# Describe your paths here
paths:
  # This is a path endpoint. Change it.
  /:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Gets `Status` object.
      operationId: status
      tags:
        - default
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/status'
  /jobs:
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        List jobs.
      operationId: getJobs
      tags:
        - jobs
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            type: array
            items:
              $ref: '#/definitions/job'
    post:
    # Describe this verb here. Note: you can use markdown
      description: |
        Create or updates a new job.
      operationId: createOrUpdateJob
      tags:
        - jobs
      parameters:
        - in: body
          name: body
          description: Updated job object
          required: true
          schema:
            $ref: "#/definitions/job"
      responses:
        # Response code
        201:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/job'
  /jobs/{job_name}:
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Show a job.
      operationId: showJobByName
      tags:
        - jobs
      parameters:
        - in: path
          name: job_name
          description: The job that needs to be fetched.
          required: true
          type: string
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/job'
    delete:
      # Describe this verb here. Note: you can use markdown
      description: |
        Delete a job.
      operationId: deleteJob
      tags:
        - jobs
      parameters:
        - in: path
          name: job_name
          description: The job that needs to be deleted.
          required: true
          type: string
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/job'
    post:
      # Describe this verb here. Note: you can use markdown
      description: |
        Executes a job.
      operationId: runJob
      tags:
        - jobs
      parameters:
        - in: path
          name: job_name
          description: The job that needs to be run.
          required: true
          type: string
      responses:
        # Response code
        202:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/job'
  /members:
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        List members.
      operationId: getMember
      tags:
        - members
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            type: array
            items:
              $ref: '#/definitions/member'
  /leader:
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        List members.
      operationId: getLeader
      tags:
        - default
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/member'
  /leave:
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Force the node to leave the cluster.
      operationId: leave
      tags:
        - default
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            type: array
            items:
              $ref: '#/definitions/member'
  /executions/{job_name}:
    get:
      #Describe this verb here. Note: you can use markdown
      description: |
        List executions.
      operationId: listExecutionsByJob
      tags:
        - executions
      parameters:
        - in: path
          name: job_name
          description: The job that owns the executions to be fetched.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            type: array
            items:
              $ref: '#/definitions/execution'

definitions:
  status:
    type: object
    description: "Status represents details about the node."
    readOnly: true
    properties:
      agent:
        description: "Node basic details"
        readOnly: true
        additionalProperties:
          type: object
      serf:
        description: "Serf status"
        readOnly: true
        additionalProperties:
          type: object
      tags:
        description: "Tags asociated with this node"
        readOnly: true
        additionalProperties:
          type: string
  job:
    type: object
    description: "A Job represents a scheduled task to execute."
    required:
    - name
    - schedule
    - command
    properties:
      name:
        type: string
        description: "Name for the job."
        readOnly: false
      schedule:
        type: string
        description: "Cron expression for the job."
        readOnly: false
      command:
        type: string
        description: "Command to run."
        readOnly: false
      shell:
        type: boolean
        description: "Use shell to run the command"
        readOnly: false
      owner:
        type: string
        description: "Owner of the job"
        readOnly: false
      owner_email:
        type: string
        description: "Email of the owner"
        readOnly: false
      success_count:
        type: integer
        description: "Number of successful executions"
        readOnly: true
      error_count:
        type: integer
        description: "Number of failed executions"
        readOnly: true
      last_success:
        type: string
        format: date-time
        description: "Last time this job executed successfully"
        readOnly: true
      last_error:
        type: string
        format: date-time
        description: "Last time this job failed"
        readOnly: true
      disabled:
        type: boolean
        description: "Disabled state of the job"
        readOnly: false
      tags:
        type: object
        description: "Target nodes tags of this job"
        additionalProperties:
          type: string
        readOnly: false
      retries:
        type: integer
        description: "Number of times to retry a failed job execution"
        example: 2
        readOnly: false
      parent_job:
        type: string
        description: "The name/id of the job that will trigger the execution of this job"
        example: "parent_job"
        readOnly: false
      dependent_jobs:
        type: array
        description: "Array containing the jobs that depends on this one"
        example: ['dependent_job']
        readOnly: true
      processors:
        type: object
        description: "Processor plugins used to process executions results of this job"
        additionalProperties:
          type: string
        readOnly: false
      concurrency:
        type: string
        description: "Concurrency policy for the job allow/forbid"
        example: "allow"
        readOnly: false
  member:
    type: object
    description: A member represents a cluster member node.
    properties:
      Name:
        type: string
        description: "Node name"
      Addr:
        type: string
        description: "IP Address"
      Port:
        type: integer
        description: "Port number"
      Tags:
        type: object
        description: "Tags asociated with this node"
        additionalProperties:
          type: string
      Status:
        type: integer
        description: "The serf status of the node see: https://godoc.org/github.com/hashicorp/serf/serf#MemberStatus"
      ProtocolMin:
        type: integer
        description: "Serf protocol minimum version this node can understand or speak"
      ProtocolMax:
        type: integer
        description": "Serf protocol minimum version this node can understand or speak"
      ProtocolCur:
        type: integer
        description: "Serf protocol current version this node can understand or speak"
      DelegateMin:
        type: integer
        description: "Serf delegate protocol minimum version this node can understand or speak"
      DelegateMax:
        type: integer
        description: "Serf delegate protocol minimum version this node can understand or speak"
      DelegateCur:
        type: integer
        description: "Serf delegate protocol minimum version this node can understand or speak"
  execution:
    type: object
    description: An execution represents a timed job run.
    properties:
      job_name:
        type: string
        description: "job name"
      started_at:
        type: string
        format: date-time
        description: "start time of the execution"
      finished_at:
        type: string
        format: date-time
        description: "when the execution finished running"
      success:
        type: boolean
        description: "the execution run successfuly"
      output:
        type: string
        description: "partial output of the command execution"
      node_name:
        type: string
        description: "name of the node that executed the command"

